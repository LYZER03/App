// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Using Prisma Accelerate for connection pooling and improved performance
// Learn more: https://pris.ly/d/accelerate

generator client {
  provider        = "prisma-client-js"
  output          = "../node_modules/.prisma/client"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model
model User {
  id            String    @id @default(uuid())
  email         String    @unique
  passwordHash  String?
  firstName     String
  lastName      String
  role          UserRole  @default(CUSTOMER)
  addresses     Address[]
  orders        Order[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

enum UserRole {
  CUSTOMER
  RESTAURANT_STAFF
  ADMIN
}

// Address model
model Address {
  id            String    @id @default(uuid())
  street        String
  city          String
  state         String
  postalCode    String
  country       String    @default("France")
  isDefault     Boolean   @default(false)
  user          User      @relation(fields: [userId], references: [id])
  userId        String
  orders        Order[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

// Category model
model Category {
  id            String    @id @default(uuid())
  name          String
  description   String?
  products      Product[]
  displayOrder  Int       @default(0)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

// Product model
model Product {
  id            String             @id @default(uuid())
  name          String
  description   String?
  price         Decimal            @db.Decimal(10, 2)
  imageUrl      String?
  isAvailable   Boolean            @default(true)
  category      Category           @relation(fields: [categoryId], references: [id])
  categoryId    String
  ingredients   ProductIngredient[]
  allergens     ProductAllergen[]
  orderItems    OrderItem[]
  createdAt     DateTime           @default(now())
  updatedAt     DateTime           @updatedAt
}

// Ingredient model
model Ingredient {
  id            String             @id @default(uuid())
  name          String
  description   String?
  products      ProductIngredient[]
  createdAt     DateTime           @default(now())
  updatedAt     DateTime           @updatedAt
}

// Many-to-many relation between Product and Ingredient
model ProductIngredient {
  product       Product    @relation(fields: [productId], references: [id])
  productId     String
  ingredient    Ingredient @relation(fields: [ingredientId], references: [id])
  ingredientId  String

  @@id([productId, ingredientId])
}

// Allergen model
model Allergen {
  id            String           @id @default(uuid())
  name          String
  description   String?
  products      ProductAllergen[]
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
}

// Many-to-many relation between Product and Allergen
model ProductAllergen {
  product       Product   @relation(fields: [productId], references: [id])
  productId     String
  allergen      Allergen  @relation(fields: [allergenId], references: [id])
  allergenId    String

  @@id([productId, allergenId])
}

// Order model
model Order {
  id              String      @id @default(uuid())
  user            User        @relation(fields: [userId], references: [id])
  userId          String
  items           OrderItem[]
  status          OrderStatus @default(PENDING)
  totalPrice      Decimal     @db.Decimal(10, 2)
  address         Address     @relation(fields: [addressId], references: [id])
  addressId       String
  paymentIntentId String?
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
}

enum OrderStatus {
  PENDING
  PREPARING
  DELIVERING
  DELIVERED
  CANCELLED
}

// OrderItem model
model OrderItem {
  id            String    @id @default(uuid())
  order         Order     @relation(fields: [orderId], references: [id])
  orderId       String
  product       Product   @relation(fields: [productId], references: [id])
  productId     String
  quantity      Int
  unitPrice     Decimal   @db.Decimal(10, 2)
  totalPrice    Decimal   @db.Decimal(10, 2)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}
